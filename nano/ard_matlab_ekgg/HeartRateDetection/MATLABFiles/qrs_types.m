function T = qrs_types(dt)

% Copyright 2018 The MathWorks, Inc.
    T.arduino_input = fi([], 1, 16, 10);
    T.heart_rate_output = int16([]);
    switch dt
        case 'arm_cortex_m3'
            F = fimath('RoundingMethod', 'Floor', ...
                       'OverflowAction', 'Wrap', ...
                       'ProductMode', 'SpecifyPrecision', ...
                       'ProductWordLength', 32, ...
                       'ProductFractionLength', 20, ...
                       'SumMode', 'SpecifyPrecision', ...
                       'SumWordLength', 32, ...
                       'SumFractionLength', 20, ...
                       'CastBeforeSum', true);
            T.data = fi([], 1, 16, 10, F);
            T.int = int16([]);
        case 'fixed'
            F = fimath('RoundingMethod', 'Floor', ...
                       'OverflowAction', 'Wrap', ...
                       'ProductMode', 'SpecifyPrecision', ...
                       'ProductWordLength', 16, ...
                       'ProductFractionLength', 10, ...
                       'SumMode', 'SpecifyPrecision', ...
                       'SumWordLength', 16, ...
                       'SumFractionLength', 10, ...
                       'CastBeforeSum', true);
            T.data = fi([], 1, 16, 10, F);
            T.int = int16([]);
        case 'fixedconvergent'
            F = fimath('RoundingMethod', 'Convergent', ...
                       'OverflowAction', 'Wrap', ...
                       'ProductMode', 'SpecifyPrecision', ...
                       'ProductWordLength', 16, ...
                       'ProductFractionLength', 10, ...
                       'SumMode', 'SpecifyPrecision', ...
                       'SumWordLength', 16, ...
                       'SumFractionLength', 10, ...
                       'CastBeforeSum', true);
            T.data = fi([], 1, 16, 10, F);
            T.int = int16([]);
        case 'fixedscaleddouble'
            F = fimath('RoundingMethod', 'Floor', ...
                       'OverflowAction', 'Wrap', ...
                       'ProductMode', 'SpecifyPrecision', ...
                       'ProductWordLength', 16, ...
                       'ProductFractionLength', 10, ...
                       'SumMode', 'SpecifyPrecision', ...
                       'SumWordLength', 16, ...
                       'SumFractionLength', 10, ...
                       'CastBeforeSum', true);
            T.data = fi([], 1, 16, 10, F,'DataType','ScaledDouble');
            T.int = int16([]);
        case 'fixedfull'
            T.data = fi([], 1, 16, 10);
            T.int = int16([]);
        case 'fixedfullscaleddouble'
            T.data = fi([], 1, 16, 10,'DataType','ScaledDouble');
            T.int = int16([]);
            
        case 'double'
            T.data = double([]);
            T.int = int16([]);

        case 'single'
            T.data = single([]);
            T.int = int16([]);
            
        otherwise
            error([dt,' is not in the list of types.']);
    end
end